/*
 * Slurm Rest API
 *
 * API to access and control Slurm.
 *
 * API version: 0.0.36
 * Contact: sales@schedmd.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package slurmrest

import (
	"encoding/json"
)

// V0036Node struct for V0036Node
type V0036Node struct {
	// computer architecture
	Architecture *string `json:"architecture,omitempty"`
	// BcastAddr
	BurstbufferNetworkAddress *string `json:"burstbuffer_network_address,omitempty"`
	// total number of boards per node
	Boards *int32 `json:"boards,omitempty"`
	// timestamp of node boot
	BootTime *int64 `json:"boot_time,omitempty"`
	// Arbitrary comment
	Comment *string `json:"comment,omitempty"`
	// number of cores per socket
	Cores *int32 `json:"cores,omitempty"`
	// Default task binding
	CpuBinding *int32 `json:"cpu_binding,omitempty"`
	// CPU load * 100
	CpuLoad *int64 `json:"cpu_load,omitempty"`
	// free memory in MiB
	FreeMemory *int32 `json:"free_memory,omitempty"`
	// configured count of cpus running on the node
	Cpus *int32 `json:"cpus,omitempty"`
	Features *string `json:"features,omitempty"`
	// list of a node's available features
	ActiveFeatures *string `json:"active_features,omitempty"`
	// list of a node's generic resources
	Gres *string `json:"gres,omitempty"`
	// list of drained GRES
	GresDrained *string `json:"gres_drained,omitempty"`
	// list of GRES in current use
	GresUsed *string `json:"gres_used,omitempty"`
	// mcs label if mcs plugin in use
	McsLabel *string `json:"mcs_label,omitempty"`
	// node name to slurm
	Name *string `json:"name,omitempty"`
	NextStateAfterReboot *string `json:"next_state_after_reboot,omitempty"`
	// state after reboot
	Address *string `json:"address,omitempty"`
	// node's hostname
	Hostname *string `json:"hostname,omitempty"`
	// current node state
	State *string `json:"state,omitempty"`
	// operating system
	OperatingSystem *string `json:"operating_system,omitempty"`
	// User allowed to use this node
	Owner *string `json:"owner,omitempty"`
	// TCP port number of the slurmd
	Port *int32 `json:"port,omitempty"`
	// configured MB of real memory on the node
	RealMemory *int32 `json:"real_memory,omitempty"`
	// reason for node being DOWN or DRAINING
	Reason *string `json:"reason,omitempty"`
	// Time stamp when reason was set
	ReasonChangedAt *int32 `json:"reason_changed_at,omitempty"`
	// User that set the reason
	ReasonSetByUser *string `json:"reason_set_by_user,omitempty"`
	// timestamp of slurmd startup
	SlurmdStartTime *int64 `json:"slurmd_start_time,omitempty"`
	// total number of sockets per node
	Sockets *int32 `json:"sockets,omitempty"`
	// number of threads per core
	Threads *int32 `json:"threads,omitempty"`
	// configured MB of total disk in TMP_FS
	TemporaryDisk *int32 `json:"temporary_disk,omitempty"`
	// arbitrary priority of node for scheduling
	Weight *int32 `json:"weight,omitempty"`
	// TRES on node
	Tres *string `json:"tres,omitempty"`
	// TRES used on node
	TresUsed *string `json:"tres_used,omitempty"`
	// Slurmd version
	SlurmdVersion *string `json:"slurmd_version,omitempty"`
	AllocCpus *int32 `json:"alloc_cpus,omitempty"`
	IdleCpus *int32 `json:"idle_cpus,omitempty"`
	Partitions *string `json:"partitions,omitempty"`
	AllocMemory *int32 `json:"alloc_memory,omitempty"`
}

// NewV0036Node instantiates a new V0036Node object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV0036Node() *V0036Node {
	this := V0036Node{}
	return &this
}

// NewV0036NodeWithDefaults instantiates a new V0036Node object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV0036NodeWithDefaults() *V0036Node {
	this := V0036Node{}
	return &this
}

// GetArchitecture returns the Architecture field value if set, zero value otherwise.
func (o *V0036Node) GetArchitecture() string {
	if o == nil || o.Architecture == nil {
		var ret string
		return ret
	}
	return *o.Architecture
}

// GetArchitectureOk returns a tuple with the Architecture field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V0036Node) GetArchitectureOk() (*string, bool) {
	if o == nil || o.Architecture == nil {
		return nil, false
	}
	return o.Architecture, true
}

// HasArchitecture returns a boolean if a field has been set.
func (o *V0036Node) HasArchitecture() bool {
	if o != nil && o.Architecture != nil {
		return true
	}

	return false
}

// SetArchitecture gets a reference to the given string and assigns it to the Architecture field.
func (o *V0036Node) SetArchitecture(v string) {
	o.Architecture = &v
}

// GetBurstbufferNetworkAddress returns the BurstbufferNetworkAddress field value if set, zero value otherwise.
func (o *V0036Node) GetBurstbufferNetworkAddress() string {
	if o == nil || o.BurstbufferNetworkAddress == nil {
		var ret string
		return ret
	}
	return *o.BurstbufferNetworkAddress
}

// GetBurstbufferNetworkAddressOk returns a tuple with the BurstbufferNetworkAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V0036Node) GetBurstbufferNetworkAddressOk() (*string, bool) {
	if o == nil || o.BurstbufferNetworkAddress == nil {
		return nil, false
	}
	return o.BurstbufferNetworkAddress, true
}

// HasBurstbufferNetworkAddress returns a boolean if a field has been set.
func (o *V0036Node) HasBurstbufferNetworkAddress() bool {
	if o != nil && o.BurstbufferNetworkAddress != nil {
		return true
	}

	return false
}

// SetBurstbufferNetworkAddress gets a reference to the given string and assigns it to the BurstbufferNetworkAddress field.
func (o *V0036Node) SetBurstbufferNetworkAddress(v string) {
	o.BurstbufferNetworkAddress = &v
}

// GetBoards returns the Boards field value if set, zero value otherwise.
func (o *V0036Node) GetBoards() int32 {
	if o == nil || o.Boards == nil {
		var ret int32
		return ret
	}
	return *o.Boards
}

// GetBoardsOk returns a tuple with the Boards field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V0036Node) GetBoardsOk() (*int32, bool) {
	if o == nil || o.Boards == nil {
		return nil, false
	}
	return o.Boards, true
}

// HasBoards returns a boolean if a field has been set.
func (o *V0036Node) HasBoards() bool {
	if o != nil && o.Boards != nil {
		return true
	}

	return false
}

// SetBoards gets a reference to the given int32 and assigns it to the Boards field.
func (o *V0036Node) SetBoards(v int32) {
	o.Boards = &v
}

// GetBootTime returns the BootTime field value if set, zero value otherwise.
func (o *V0036Node) GetBootTime() int64 {
	if o == nil || o.BootTime == nil {
		var ret int64
		return ret
	}
	return *o.BootTime
}

// GetBootTimeOk returns a tuple with the BootTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V0036Node) GetBootTimeOk() (*int64, bool) {
	if o == nil || o.BootTime == nil {
		return nil, false
	}
	return o.BootTime, true
}

// HasBootTime returns a boolean if a field has been set.
func (o *V0036Node) HasBootTime() bool {
	if o != nil && o.BootTime != nil {
		return true
	}

	return false
}

// SetBootTime gets a reference to the given int64 and assigns it to the BootTime field.
func (o *V0036Node) SetBootTime(v int64) {
	o.BootTime = &v
}

// GetComment returns the Comment field value if set, zero value otherwise.
func (o *V0036Node) GetComment() string {
	if o == nil || o.Comment == nil {
		var ret string
		return ret
	}
	return *o.Comment
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V0036Node) GetCommentOk() (*string, bool) {
	if o == nil || o.Comment == nil {
		return nil, false
	}
	return o.Comment, true
}

// HasComment returns a boolean if a field has been set.
func (o *V0036Node) HasComment() bool {
	if o != nil && o.Comment != nil {
		return true
	}

	return false
}

// SetComment gets a reference to the given string and assigns it to the Comment field.
func (o *V0036Node) SetComment(v string) {
	o.Comment = &v
}

// GetCores returns the Cores field value if set, zero value otherwise.
func (o *V0036Node) GetCores() int32 {
	if o == nil || o.Cores == nil {
		var ret int32
		return ret
	}
	return *o.Cores
}

// GetCoresOk returns a tuple with the Cores field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V0036Node) GetCoresOk() (*int32, bool) {
	if o == nil || o.Cores == nil {
		return nil, false
	}
	return o.Cores, true
}

// HasCores returns a boolean if a field has been set.
func (o *V0036Node) HasCores() bool {
	if o != nil && o.Cores != nil {
		return true
	}

	return false
}

// SetCores gets a reference to the given int32 and assigns it to the Cores field.
func (o *V0036Node) SetCores(v int32) {
	o.Cores = &v
}

// GetCpuBinding returns the CpuBinding field value if set, zero value otherwise.
func (o *V0036Node) GetCpuBinding() int32 {
	if o == nil || o.CpuBinding == nil {
		var ret int32
		return ret
	}
	return *o.CpuBinding
}

// GetCpuBindingOk returns a tuple with the CpuBinding field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V0036Node) GetCpuBindingOk() (*int32, bool) {
	if o == nil || o.CpuBinding == nil {
		return nil, false
	}
	return o.CpuBinding, true
}

// HasCpuBinding returns a boolean if a field has been set.
func (o *V0036Node) HasCpuBinding() bool {
	if o != nil && o.CpuBinding != nil {
		return true
	}

	return false
}

// SetCpuBinding gets a reference to the given int32 and assigns it to the CpuBinding field.
func (o *V0036Node) SetCpuBinding(v int32) {
	o.CpuBinding = &v
}

// GetCpuLoad returns the CpuLoad field value if set, zero value otherwise.
func (o *V0036Node) GetCpuLoad() int64 {
	if o == nil || o.CpuLoad == nil {
		var ret int64
		return ret
	}
	return *o.CpuLoad
}

// GetCpuLoadOk returns a tuple with the CpuLoad field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V0036Node) GetCpuLoadOk() (*int64, bool) {
	if o == nil || o.CpuLoad == nil {
		return nil, false
	}
	return o.CpuLoad, true
}

// HasCpuLoad returns a boolean if a field has been set.
func (o *V0036Node) HasCpuLoad() bool {
	if o != nil && o.CpuLoad != nil {
		return true
	}

	return false
}

// SetCpuLoad gets a reference to the given int64 and assigns it to the CpuLoad field.
func (o *V0036Node) SetCpuLoad(v int64) {
	o.CpuLoad = &v
}

// GetFreeMemory returns the FreeMemory field value if set, zero value otherwise.
func (o *V0036Node) GetFreeMemory() int32 {
	if o == nil || o.FreeMemory == nil {
		var ret int32
		return ret
	}
	return *o.FreeMemory
}

// GetFreeMemoryOk returns a tuple with the FreeMemory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V0036Node) GetFreeMemoryOk() (*int32, bool) {
	if o == nil || o.FreeMemory == nil {
		return nil, false
	}
	return o.FreeMemory, true
}

// HasFreeMemory returns a boolean if a field has been set.
func (o *V0036Node) HasFreeMemory() bool {
	if o != nil && o.FreeMemory != nil {
		return true
	}

	return false
}

// SetFreeMemory gets a reference to the given int32 and assigns it to the FreeMemory field.
func (o *V0036Node) SetFreeMemory(v int32) {
	o.FreeMemory = &v
}

// GetCpus returns the Cpus field value if set, zero value otherwise.
func (o *V0036Node) GetCpus() int32 {
	if o == nil || o.Cpus == nil {
		var ret int32
		return ret
	}
	return *o.Cpus
}

// GetCpusOk returns a tuple with the Cpus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V0036Node) GetCpusOk() (*int32, bool) {
	if o == nil || o.Cpus == nil {
		return nil, false
	}
	return o.Cpus, true
}

// HasCpus returns a boolean if a field has been set.
func (o *V0036Node) HasCpus() bool {
	if o != nil && o.Cpus != nil {
		return true
	}

	return false
}

// SetCpus gets a reference to the given int32 and assigns it to the Cpus field.
func (o *V0036Node) SetCpus(v int32) {
	o.Cpus = &v
}

// GetFeatures returns the Features field value if set, zero value otherwise.
func (o *V0036Node) GetFeatures() string {
	if o == nil || o.Features == nil {
		var ret string
		return ret
	}
	return *o.Features
}

// GetFeaturesOk returns a tuple with the Features field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V0036Node) GetFeaturesOk() (*string, bool) {
	if o == nil || o.Features == nil {
		return nil, false
	}
	return o.Features, true
}

// HasFeatures returns a boolean if a field has been set.
func (o *V0036Node) HasFeatures() bool {
	if o != nil && o.Features != nil {
		return true
	}

	return false
}

// SetFeatures gets a reference to the given string and assigns it to the Features field.
func (o *V0036Node) SetFeatures(v string) {
	o.Features = &v
}

// GetActiveFeatures returns the ActiveFeatures field value if set, zero value otherwise.
func (o *V0036Node) GetActiveFeatures() string {
	if o == nil || o.ActiveFeatures == nil {
		var ret string
		return ret
	}
	return *o.ActiveFeatures
}

// GetActiveFeaturesOk returns a tuple with the ActiveFeatures field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V0036Node) GetActiveFeaturesOk() (*string, bool) {
	if o == nil || o.ActiveFeatures == nil {
		return nil, false
	}
	return o.ActiveFeatures, true
}

// HasActiveFeatures returns a boolean if a field has been set.
func (o *V0036Node) HasActiveFeatures() bool {
	if o != nil && o.ActiveFeatures != nil {
		return true
	}

	return false
}

// SetActiveFeatures gets a reference to the given string and assigns it to the ActiveFeatures field.
func (o *V0036Node) SetActiveFeatures(v string) {
	o.ActiveFeatures = &v
}

// GetGres returns the Gres field value if set, zero value otherwise.
func (o *V0036Node) GetGres() string {
	if o == nil || o.Gres == nil {
		var ret string
		return ret
	}
	return *o.Gres
}

// GetGresOk returns a tuple with the Gres field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V0036Node) GetGresOk() (*string, bool) {
	if o == nil || o.Gres == nil {
		return nil, false
	}
	return o.Gres, true
}

// HasGres returns a boolean if a field has been set.
func (o *V0036Node) HasGres() bool {
	if o != nil && o.Gres != nil {
		return true
	}

	return false
}

// SetGres gets a reference to the given string and assigns it to the Gres field.
func (o *V0036Node) SetGres(v string) {
	o.Gres = &v
}

// GetGresDrained returns the GresDrained field value if set, zero value otherwise.
func (o *V0036Node) GetGresDrained() string {
	if o == nil || o.GresDrained == nil {
		var ret string
		return ret
	}
	return *o.GresDrained
}

// GetGresDrainedOk returns a tuple with the GresDrained field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V0036Node) GetGresDrainedOk() (*string, bool) {
	if o == nil || o.GresDrained == nil {
		return nil, false
	}
	return o.GresDrained, true
}

// HasGresDrained returns a boolean if a field has been set.
func (o *V0036Node) HasGresDrained() bool {
	if o != nil && o.GresDrained != nil {
		return true
	}

	return false
}

// SetGresDrained gets a reference to the given string and assigns it to the GresDrained field.
func (o *V0036Node) SetGresDrained(v string) {
	o.GresDrained = &v
}

// GetGresUsed returns the GresUsed field value if set, zero value otherwise.
func (o *V0036Node) GetGresUsed() string {
	if o == nil || o.GresUsed == nil {
		var ret string
		return ret
	}
	return *o.GresUsed
}

// GetGresUsedOk returns a tuple with the GresUsed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V0036Node) GetGresUsedOk() (*string, bool) {
	if o == nil || o.GresUsed == nil {
		return nil, false
	}
	return o.GresUsed, true
}

// HasGresUsed returns a boolean if a field has been set.
func (o *V0036Node) HasGresUsed() bool {
	if o != nil && o.GresUsed != nil {
		return true
	}

	return false
}

// SetGresUsed gets a reference to the given string and assigns it to the GresUsed field.
func (o *V0036Node) SetGresUsed(v string) {
	o.GresUsed = &v
}

// GetMcsLabel returns the McsLabel field value if set, zero value otherwise.
func (o *V0036Node) GetMcsLabel() string {
	if o == nil || o.McsLabel == nil {
		var ret string
		return ret
	}
	return *o.McsLabel
}

// GetMcsLabelOk returns a tuple with the McsLabel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V0036Node) GetMcsLabelOk() (*string, bool) {
	if o == nil || o.McsLabel == nil {
		return nil, false
	}
	return o.McsLabel, true
}

// HasMcsLabel returns a boolean if a field has been set.
func (o *V0036Node) HasMcsLabel() bool {
	if o != nil && o.McsLabel != nil {
		return true
	}

	return false
}

// SetMcsLabel gets a reference to the given string and assigns it to the McsLabel field.
func (o *V0036Node) SetMcsLabel(v string) {
	o.McsLabel = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *V0036Node) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V0036Node) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *V0036Node) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *V0036Node) SetName(v string) {
	o.Name = &v
}

// GetNextStateAfterReboot returns the NextStateAfterReboot field value if set, zero value otherwise.
func (o *V0036Node) GetNextStateAfterReboot() string {
	if o == nil || o.NextStateAfterReboot == nil {
		var ret string
		return ret
	}
	return *o.NextStateAfterReboot
}

// GetNextStateAfterRebootOk returns a tuple with the NextStateAfterReboot field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V0036Node) GetNextStateAfterRebootOk() (*string, bool) {
	if o == nil || o.NextStateAfterReboot == nil {
		return nil, false
	}
	return o.NextStateAfterReboot, true
}

// HasNextStateAfterReboot returns a boolean if a field has been set.
func (o *V0036Node) HasNextStateAfterReboot() bool {
	if o != nil && o.NextStateAfterReboot != nil {
		return true
	}

	return false
}

// SetNextStateAfterReboot gets a reference to the given string and assigns it to the NextStateAfterReboot field.
func (o *V0036Node) SetNextStateAfterReboot(v string) {
	o.NextStateAfterReboot = &v
}

// GetAddress returns the Address field value if set, zero value otherwise.
func (o *V0036Node) GetAddress() string {
	if o == nil || o.Address == nil {
		var ret string
		return ret
	}
	return *o.Address
}

// GetAddressOk returns a tuple with the Address field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V0036Node) GetAddressOk() (*string, bool) {
	if o == nil || o.Address == nil {
		return nil, false
	}
	return o.Address, true
}

// HasAddress returns a boolean if a field has been set.
func (o *V0036Node) HasAddress() bool {
	if o != nil && o.Address != nil {
		return true
	}

	return false
}

// SetAddress gets a reference to the given string and assigns it to the Address field.
func (o *V0036Node) SetAddress(v string) {
	o.Address = &v
}

// GetHostname returns the Hostname field value if set, zero value otherwise.
func (o *V0036Node) GetHostname() string {
	if o == nil || o.Hostname == nil {
		var ret string
		return ret
	}
	return *o.Hostname
}

// GetHostnameOk returns a tuple with the Hostname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V0036Node) GetHostnameOk() (*string, bool) {
	if o == nil || o.Hostname == nil {
		return nil, false
	}
	return o.Hostname, true
}

// HasHostname returns a boolean if a field has been set.
func (o *V0036Node) HasHostname() bool {
	if o != nil && o.Hostname != nil {
		return true
	}

	return false
}

// SetHostname gets a reference to the given string and assigns it to the Hostname field.
func (o *V0036Node) SetHostname(v string) {
	o.Hostname = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *V0036Node) GetState() string {
	if o == nil || o.State == nil {
		var ret string
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V0036Node) GetStateOk() (*string, bool) {
	if o == nil || o.State == nil {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *V0036Node) HasState() bool {
	if o != nil && o.State != nil {
		return true
	}

	return false
}

// SetState gets a reference to the given string and assigns it to the State field.
func (o *V0036Node) SetState(v string) {
	o.State = &v
}

// GetOperatingSystem returns the OperatingSystem field value if set, zero value otherwise.
func (o *V0036Node) GetOperatingSystem() string {
	if o == nil || o.OperatingSystem == nil {
		var ret string
		return ret
	}
	return *o.OperatingSystem
}

// GetOperatingSystemOk returns a tuple with the OperatingSystem field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V0036Node) GetOperatingSystemOk() (*string, bool) {
	if o == nil || o.OperatingSystem == nil {
		return nil, false
	}
	return o.OperatingSystem, true
}

// HasOperatingSystem returns a boolean if a field has been set.
func (o *V0036Node) HasOperatingSystem() bool {
	if o != nil && o.OperatingSystem != nil {
		return true
	}

	return false
}

// SetOperatingSystem gets a reference to the given string and assigns it to the OperatingSystem field.
func (o *V0036Node) SetOperatingSystem(v string) {
	o.OperatingSystem = &v
}

// GetOwner returns the Owner field value if set, zero value otherwise.
func (o *V0036Node) GetOwner() string {
	if o == nil || o.Owner == nil {
		var ret string
		return ret
	}
	return *o.Owner
}

// GetOwnerOk returns a tuple with the Owner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V0036Node) GetOwnerOk() (*string, bool) {
	if o == nil || o.Owner == nil {
		return nil, false
	}
	return o.Owner, true
}

// HasOwner returns a boolean if a field has been set.
func (o *V0036Node) HasOwner() bool {
	if o != nil && o.Owner != nil {
		return true
	}

	return false
}

// SetOwner gets a reference to the given string and assigns it to the Owner field.
func (o *V0036Node) SetOwner(v string) {
	o.Owner = &v
}

// GetPort returns the Port field value if set, zero value otherwise.
func (o *V0036Node) GetPort() int32 {
	if o == nil || o.Port == nil {
		var ret int32
		return ret
	}
	return *o.Port
}

// GetPortOk returns a tuple with the Port field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V0036Node) GetPortOk() (*int32, bool) {
	if o == nil || o.Port == nil {
		return nil, false
	}
	return o.Port, true
}

// HasPort returns a boolean if a field has been set.
func (o *V0036Node) HasPort() bool {
	if o != nil && o.Port != nil {
		return true
	}

	return false
}

// SetPort gets a reference to the given int32 and assigns it to the Port field.
func (o *V0036Node) SetPort(v int32) {
	o.Port = &v
}

// GetRealMemory returns the RealMemory field value if set, zero value otherwise.
func (o *V0036Node) GetRealMemory() int32 {
	if o == nil || o.RealMemory == nil {
		var ret int32
		return ret
	}
	return *o.RealMemory
}

// GetRealMemoryOk returns a tuple with the RealMemory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V0036Node) GetRealMemoryOk() (*int32, bool) {
	if o == nil || o.RealMemory == nil {
		return nil, false
	}
	return o.RealMemory, true
}

// HasRealMemory returns a boolean if a field has been set.
func (o *V0036Node) HasRealMemory() bool {
	if o != nil && o.RealMemory != nil {
		return true
	}

	return false
}

// SetRealMemory gets a reference to the given int32 and assigns it to the RealMemory field.
func (o *V0036Node) SetRealMemory(v int32) {
	o.RealMemory = &v
}

// GetReason returns the Reason field value if set, zero value otherwise.
func (o *V0036Node) GetReason() string {
	if o == nil || o.Reason == nil {
		var ret string
		return ret
	}
	return *o.Reason
}

// GetReasonOk returns a tuple with the Reason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V0036Node) GetReasonOk() (*string, bool) {
	if o == nil || o.Reason == nil {
		return nil, false
	}
	return o.Reason, true
}

// HasReason returns a boolean if a field has been set.
func (o *V0036Node) HasReason() bool {
	if o != nil && o.Reason != nil {
		return true
	}

	return false
}

// SetReason gets a reference to the given string and assigns it to the Reason field.
func (o *V0036Node) SetReason(v string) {
	o.Reason = &v
}

// GetReasonChangedAt returns the ReasonChangedAt field value if set, zero value otherwise.
func (o *V0036Node) GetReasonChangedAt() int32 {
	if o == nil || o.ReasonChangedAt == nil {
		var ret int32
		return ret
	}
	return *o.ReasonChangedAt
}

// GetReasonChangedAtOk returns a tuple with the ReasonChangedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V0036Node) GetReasonChangedAtOk() (*int32, bool) {
	if o == nil || o.ReasonChangedAt == nil {
		return nil, false
	}
	return o.ReasonChangedAt, true
}

// HasReasonChangedAt returns a boolean if a field has been set.
func (o *V0036Node) HasReasonChangedAt() bool {
	if o != nil && o.ReasonChangedAt != nil {
		return true
	}

	return false
}

// SetReasonChangedAt gets a reference to the given int32 and assigns it to the ReasonChangedAt field.
func (o *V0036Node) SetReasonChangedAt(v int32) {
	o.ReasonChangedAt = &v
}

// GetReasonSetByUser returns the ReasonSetByUser field value if set, zero value otherwise.
func (o *V0036Node) GetReasonSetByUser() string {
	if o == nil || o.ReasonSetByUser == nil {
		var ret string
		return ret
	}
	return *o.ReasonSetByUser
}

// GetReasonSetByUserOk returns a tuple with the ReasonSetByUser field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V0036Node) GetReasonSetByUserOk() (*string, bool) {
	if o == nil || o.ReasonSetByUser == nil {
		return nil, false
	}
	return o.ReasonSetByUser, true
}

// HasReasonSetByUser returns a boolean if a field has been set.
func (o *V0036Node) HasReasonSetByUser() bool {
	if o != nil && o.ReasonSetByUser != nil {
		return true
	}

	return false
}

// SetReasonSetByUser gets a reference to the given string and assigns it to the ReasonSetByUser field.
func (o *V0036Node) SetReasonSetByUser(v string) {
	o.ReasonSetByUser = &v
}

// GetSlurmdStartTime returns the SlurmdStartTime field value if set, zero value otherwise.
func (o *V0036Node) GetSlurmdStartTime() int64 {
	if o == nil || o.SlurmdStartTime == nil {
		var ret int64
		return ret
	}
	return *o.SlurmdStartTime
}

// GetSlurmdStartTimeOk returns a tuple with the SlurmdStartTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V0036Node) GetSlurmdStartTimeOk() (*int64, bool) {
	if o == nil || o.SlurmdStartTime == nil {
		return nil, false
	}
	return o.SlurmdStartTime, true
}

// HasSlurmdStartTime returns a boolean if a field has been set.
func (o *V0036Node) HasSlurmdStartTime() bool {
	if o != nil && o.SlurmdStartTime != nil {
		return true
	}

	return false
}

// SetSlurmdStartTime gets a reference to the given int64 and assigns it to the SlurmdStartTime field.
func (o *V0036Node) SetSlurmdStartTime(v int64) {
	o.SlurmdStartTime = &v
}

// GetSockets returns the Sockets field value if set, zero value otherwise.
func (o *V0036Node) GetSockets() int32 {
	if o == nil || o.Sockets == nil {
		var ret int32
		return ret
	}
	return *o.Sockets
}

// GetSocketsOk returns a tuple with the Sockets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V0036Node) GetSocketsOk() (*int32, bool) {
	if o == nil || o.Sockets == nil {
		return nil, false
	}
	return o.Sockets, true
}

// HasSockets returns a boolean if a field has been set.
func (o *V0036Node) HasSockets() bool {
	if o != nil && o.Sockets != nil {
		return true
	}

	return false
}

// SetSockets gets a reference to the given int32 and assigns it to the Sockets field.
func (o *V0036Node) SetSockets(v int32) {
	o.Sockets = &v
}

// GetThreads returns the Threads field value if set, zero value otherwise.
func (o *V0036Node) GetThreads() int32 {
	if o == nil || o.Threads == nil {
		var ret int32
		return ret
	}
	return *o.Threads
}

// GetThreadsOk returns a tuple with the Threads field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V0036Node) GetThreadsOk() (*int32, bool) {
	if o == nil || o.Threads == nil {
		return nil, false
	}
	return o.Threads, true
}

// HasThreads returns a boolean if a field has been set.
func (o *V0036Node) HasThreads() bool {
	if o != nil && o.Threads != nil {
		return true
	}

	return false
}

// SetThreads gets a reference to the given int32 and assigns it to the Threads field.
func (o *V0036Node) SetThreads(v int32) {
	o.Threads = &v
}

// GetTemporaryDisk returns the TemporaryDisk field value if set, zero value otherwise.
func (o *V0036Node) GetTemporaryDisk() int32 {
	if o == nil || o.TemporaryDisk == nil {
		var ret int32
		return ret
	}
	return *o.TemporaryDisk
}

// GetTemporaryDiskOk returns a tuple with the TemporaryDisk field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V0036Node) GetTemporaryDiskOk() (*int32, bool) {
	if o == nil || o.TemporaryDisk == nil {
		return nil, false
	}
	return o.TemporaryDisk, true
}

// HasTemporaryDisk returns a boolean if a field has been set.
func (o *V0036Node) HasTemporaryDisk() bool {
	if o != nil && o.TemporaryDisk != nil {
		return true
	}

	return false
}

// SetTemporaryDisk gets a reference to the given int32 and assigns it to the TemporaryDisk field.
func (o *V0036Node) SetTemporaryDisk(v int32) {
	o.TemporaryDisk = &v
}

// GetWeight returns the Weight field value if set, zero value otherwise.
func (o *V0036Node) GetWeight() int32 {
	if o == nil || o.Weight == nil {
		var ret int32
		return ret
	}
	return *o.Weight
}

// GetWeightOk returns a tuple with the Weight field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V0036Node) GetWeightOk() (*int32, bool) {
	if o == nil || o.Weight == nil {
		return nil, false
	}
	return o.Weight, true
}

// HasWeight returns a boolean if a field has been set.
func (o *V0036Node) HasWeight() bool {
	if o != nil && o.Weight != nil {
		return true
	}

	return false
}

// SetWeight gets a reference to the given int32 and assigns it to the Weight field.
func (o *V0036Node) SetWeight(v int32) {
	o.Weight = &v
}

// GetTres returns the Tres field value if set, zero value otherwise.
func (o *V0036Node) GetTres() string {
	if o == nil || o.Tres == nil {
		var ret string
		return ret
	}
	return *o.Tres
}

// GetTresOk returns a tuple with the Tres field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V0036Node) GetTresOk() (*string, bool) {
	if o == nil || o.Tres == nil {
		return nil, false
	}
	return o.Tres, true
}

// HasTres returns a boolean if a field has been set.
func (o *V0036Node) HasTres() bool {
	if o != nil && o.Tres != nil {
		return true
	}

	return false
}

// SetTres gets a reference to the given string and assigns it to the Tres field.
func (o *V0036Node) SetTres(v string) {
	o.Tres = &v
}

// GetTresUsed returns the TresUsed field value if set, zero value otherwise.
func (o *V0036Node) GetTresUsed() string {
	if o == nil || o.TresUsed == nil {
		var ret string
		return ret
	}
	return *o.TresUsed
}

// GetTresUsedOk returns a tuple with the TresUsed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V0036Node) GetTresUsedOk() (*string, bool) {
	if o == nil || o.TresUsed == nil {
		return nil, false
	}
	return o.TresUsed, true
}

// HasTresUsed returns a boolean if a field has been set.
func (o *V0036Node) HasTresUsed() bool {
	if o != nil && o.TresUsed != nil {
		return true
	}

	return false
}

// SetTresUsed gets a reference to the given string and assigns it to the TresUsed field.
func (o *V0036Node) SetTresUsed(v string) {
	o.TresUsed = &v
}

// GetSlurmdVersion returns the SlurmdVersion field value if set, zero value otherwise.
func (o *V0036Node) GetSlurmdVersion() string {
	if o == nil || o.SlurmdVersion == nil {
		var ret string
		return ret
	}
	return *o.SlurmdVersion
}

// GetSlurmdVersionOk returns a tuple with the SlurmdVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V0036Node) GetSlurmdVersionOk() (*string, bool) {
	if o == nil || o.SlurmdVersion == nil {
		return nil, false
	}
	return o.SlurmdVersion, true
}

// HasSlurmdVersion returns a boolean if a field has been set.
func (o *V0036Node) HasSlurmdVersion() bool {
	if o != nil && o.SlurmdVersion != nil {
		return true
	}

	return false
}

// SetSlurmdVersion gets a reference to the given string and assigns it to the SlurmdVersion field.
func (o *V0036Node) SetSlurmdVersion(v string) {
	o.SlurmdVersion = &v
}

// GetAllocCpus returns the AllocCpus field value if set, zero value otherwise.
func (o *V0036Node) GetAllocCpus() int32 {
	if o == nil || o.AllocCpus == nil {
		var ret int32
		return ret
	}
	return *o.AllocCpus
}

// GetAllocCpusOk returns a tuple with the AllocCpus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V0036Node) GetAllocCpusOk() (*int32, bool) {
	if o == nil || o.AllocCpus == nil {
		return nil, false
	}
	return o.AllocCpus, true
}

// HasAllocCpus returns a boolean if a field has been set.
func (o *V0036Node) HasAllocCpus() bool {
	if o != nil && o.AllocCpus != nil {
		return true
	}

	return false
}

// SetAllocCpus gets a reference to the given int32 and assigns it to the AllocCpus field.
func (o *V0036Node) SetAllocCpus(v int32) {
	o.AllocCpus = &v
}

// GetIdleCpus returns the IdleCpus field value if set, zero value otherwise.
func (o *V0036Node) GetIdleCpus() int32 {
	if o == nil || o.IdleCpus == nil {
		var ret int32
		return ret
	}
	return *o.IdleCpus
}

// GetIdleCpusOk returns a tuple with the IdleCpus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V0036Node) GetIdleCpusOk() (*int32, bool) {
	if o == nil || o.IdleCpus == nil {
		return nil, false
	}
	return o.IdleCpus, true
}

// HasIdleCpus returns a boolean if a field has been set.
func (o *V0036Node) HasIdleCpus() bool {
	if o != nil && o.IdleCpus != nil {
		return true
	}

	return false
}

// SetIdleCpus gets a reference to the given int32 and assigns it to the IdleCpus field.
func (o *V0036Node) SetIdleCpus(v int32) {
	o.IdleCpus = &v
}

// GetPartitions returns the Partitions field value if set, zero value otherwise.
func (o *V0036Node) GetPartitions() string {
	if o == nil || o.Partitions == nil {
		var ret string
		return ret
	}
	return *o.Partitions
}

// GetPartitionsOk returns a tuple with the Partitions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V0036Node) GetPartitionsOk() (*string, bool) {
	if o == nil || o.Partitions == nil {
		return nil, false
	}
	return o.Partitions, true
}

// HasPartitions returns a boolean if a field has been set.
func (o *V0036Node) HasPartitions() bool {
	if o != nil && o.Partitions != nil {
		return true
	}

	return false
}

// SetPartitions gets a reference to the given string and assigns it to the Partitions field.
func (o *V0036Node) SetPartitions(v string) {
	o.Partitions = &v
}

// GetAllocMemory returns the AllocMemory field value if set, zero value otherwise.
func (o *V0036Node) GetAllocMemory() int32 {
	if o == nil || o.AllocMemory == nil {
		var ret int32
		return ret
	}
	return *o.AllocMemory
}

// GetAllocMemoryOk returns a tuple with the AllocMemory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V0036Node) GetAllocMemoryOk() (*int32, bool) {
	if o == nil || o.AllocMemory == nil {
		return nil, false
	}
	return o.AllocMemory, true
}

// HasAllocMemory returns a boolean if a field has been set.
func (o *V0036Node) HasAllocMemory() bool {
	if o != nil && o.AllocMemory != nil {
		return true
	}

	return false
}

// SetAllocMemory gets a reference to the given int32 and assigns it to the AllocMemory field.
func (o *V0036Node) SetAllocMemory(v int32) {
	o.AllocMemory = &v
}

func (o V0036Node) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Architecture != nil {
		toSerialize["architecture"] = o.Architecture
	}
	if o.BurstbufferNetworkAddress != nil {
		toSerialize["burstbuffer_network_address"] = o.BurstbufferNetworkAddress
	}
	if o.Boards != nil {
		toSerialize["boards"] = o.Boards
	}
	if o.BootTime != nil {
		toSerialize["boot_time"] = o.BootTime
	}
	if o.Comment != nil {
		toSerialize["comment"] = o.Comment
	}
	if o.Cores != nil {
		toSerialize["cores"] = o.Cores
	}
	if o.CpuBinding != nil {
		toSerialize["cpu_binding"] = o.CpuBinding
	}
	if o.CpuLoad != nil {
		toSerialize["cpu_load"] = o.CpuLoad
	}
	if o.FreeMemory != nil {
		toSerialize["free_memory"] = o.FreeMemory
	}
	if o.Cpus != nil {
		toSerialize["cpus"] = o.Cpus
	}
	if o.Features != nil {
		toSerialize["features"] = o.Features
	}
	if o.ActiveFeatures != nil {
		toSerialize["active_features"] = o.ActiveFeatures
	}
	if o.Gres != nil {
		toSerialize["gres"] = o.Gres
	}
	if o.GresDrained != nil {
		toSerialize["gres_drained"] = o.GresDrained
	}
	if o.GresUsed != nil {
		toSerialize["gres_used"] = o.GresUsed
	}
	if o.McsLabel != nil {
		toSerialize["mcs_label"] = o.McsLabel
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.NextStateAfterReboot != nil {
		toSerialize["next_state_after_reboot"] = o.NextStateAfterReboot
	}
	if o.Address != nil {
		toSerialize["address"] = o.Address
	}
	if o.Hostname != nil {
		toSerialize["hostname"] = o.Hostname
	}
	if o.State != nil {
		toSerialize["state"] = o.State
	}
	if o.OperatingSystem != nil {
		toSerialize["operating_system"] = o.OperatingSystem
	}
	if o.Owner != nil {
		toSerialize["owner"] = o.Owner
	}
	if o.Port != nil {
		toSerialize["port"] = o.Port
	}
	if o.RealMemory != nil {
		toSerialize["real_memory"] = o.RealMemory
	}
	if o.Reason != nil {
		toSerialize["reason"] = o.Reason
	}
	if o.ReasonChangedAt != nil {
		toSerialize["reason_changed_at"] = o.ReasonChangedAt
	}
	if o.ReasonSetByUser != nil {
		toSerialize["reason_set_by_user"] = o.ReasonSetByUser
	}
	if o.SlurmdStartTime != nil {
		toSerialize["slurmd_start_time"] = o.SlurmdStartTime
	}
	if o.Sockets != nil {
		toSerialize["sockets"] = o.Sockets
	}
	if o.Threads != nil {
		toSerialize["threads"] = o.Threads
	}
	if o.TemporaryDisk != nil {
		toSerialize["temporary_disk"] = o.TemporaryDisk
	}
	if o.Weight != nil {
		toSerialize["weight"] = o.Weight
	}
	if o.Tres != nil {
		toSerialize["tres"] = o.Tres
	}
	if o.TresUsed != nil {
		toSerialize["tres_used"] = o.TresUsed
	}
	if o.SlurmdVersion != nil {
		toSerialize["slurmd_version"] = o.SlurmdVersion
	}
	if o.AllocCpus != nil {
		toSerialize["alloc_cpus"] = o.AllocCpus
	}
	if o.IdleCpus != nil {
		toSerialize["idle_cpus"] = o.IdleCpus
	}
	if o.Partitions != nil {
		toSerialize["partitions"] = o.Partitions
	}
	if o.AllocMemory != nil {
		toSerialize["alloc_memory"] = o.AllocMemory
	}
	return json.Marshal(toSerialize)
}

type NullableV0036Node struct {
	value *V0036Node
	isSet bool
}

func (v NullableV0036Node) Get() *V0036Node {
	return v.value
}

func (v *NullableV0036Node) Set(val *V0036Node) {
	v.value = val
	v.isSet = true
}

func (v NullableV0036Node) IsSet() bool {
	return v.isSet
}

func (v *NullableV0036Node) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV0036Node(val *V0036Node) *NullableV0036Node {
	return &NullableV0036Node{value: val, isSet: true}
}

func (v NullableV0036Node) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV0036Node) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


