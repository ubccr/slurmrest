/*
 * Slurm Rest API
 *
 * API to access and control Slurm.
 *
 * API version: 0.0.36
 * Contact: sales@schedmd.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package slurmrest

import (
	"encoding/json"
)

// V0036NodeAllocation struct for V0036NodeAllocation
type V0036NodeAllocation struct {
	// amount of assigned job memory
	Memory *int32 `json:"memory,omitempty"`
	// amount of assigned job CPUs
	Cpus *int32 `json:"cpus,omitempty"`
	// assignment status of each socket by socket id
	Sockets *map[string]interface{} `json:"sockets,omitempty"`
	// assignment status of each core by core id
	Cores *map[string]interface{} `json:"cores,omitempty"`
}

// NewV0036NodeAllocation instantiates a new V0036NodeAllocation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV0036NodeAllocation() *V0036NodeAllocation {
	this := V0036NodeAllocation{}
	return &this
}

// NewV0036NodeAllocationWithDefaults instantiates a new V0036NodeAllocation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV0036NodeAllocationWithDefaults() *V0036NodeAllocation {
	this := V0036NodeAllocation{}
	return &this
}

// GetMemory returns the Memory field value if set, zero value otherwise.
func (o *V0036NodeAllocation) GetMemory() int32 {
	if o == nil || o.Memory == nil {
		var ret int32
		return ret
	}
	return *o.Memory
}

// GetMemoryOk returns a tuple with the Memory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V0036NodeAllocation) GetMemoryOk() (*int32, bool) {
	if o == nil || o.Memory == nil {
		return nil, false
	}
	return o.Memory, true
}

// HasMemory returns a boolean if a field has been set.
func (o *V0036NodeAllocation) HasMemory() bool {
	if o != nil && o.Memory != nil {
		return true
	}

	return false
}

// SetMemory gets a reference to the given int32 and assigns it to the Memory field.
func (o *V0036NodeAllocation) SetMemory(v int32) {
	o.Memory = &v
}

// GetCpus returns the Cpus field value if set, zero value otherwise.
func (o *V0036NodeAllocation) GetCpus() int32 {
	if o == nil || o.Cpus == nil {
		var ret int32
		return ret
	}
	return *o.Cpus
}

// GetCpusOk returns a tuple with the Cpus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V0036NodeAllocation) GetCpusOk() (*int32, bool) {
	if o == nil || o.Cpus == nil {
		return nil, false
	}
	return o.Cpus, true
}

// HasCpus returns a boolean if a field has been set.
func (o *V0036NodeAllocation) HasCpus() bool {
	if o != nil && o.Cpus != nil {
		return true
	}

	return false
}

// SetCpus gets a reference to the given int32 and assigns it to the Cpus field.
func (o *V0036NodeAllocation) SetCpus(v int32) {
	o.Cpus = &v
}

// GetSockets returns the Sockets field value if set, zero value otherwise.
func (o *V0036NodeAllocation) GetSockets() map[string]interface{} {
	if o == nil || o.Sockets == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.Sockets
}

// GetSocketsOk returns a tuple with the Sockets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V0036NodeAllocation) GetSocketsOk() (*map[string]interface{}, bool) {
	if o == nil || o.Sockets == nil {
		return nil, false
	}
	return o.Sockets, true
}

// HasSockets returns a boolean if a field has been set.
func (o *V0036NodeAllocation) HasSockets() bool {
	if o != nil && o.Sockets != nil {
		return true
	}

	return false
}

// SetSockets gets a reference to the given map[string]interface{} and assigns it to the Sockets field.
func (o *V0036NodeAllocation) SetSockets(v map[string]interface{}) {
	o.Sockets = &v
}

// GetCores returns the Cores field value if set, zero value otherwise.
func (o *V0036NodeAllocation) GetCores() map[string]interface{} {
	if o == nil || o.Cores == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.Cores
}

// GetCoresOk returns a tuple with the Cores field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V0036NodeAllocation) GetCoresOk() (*map[string]interface{}, bool) {
	if o == nil || o.Cores == nil {
		return nil, false
	}
	return o.Cores, true
}

// HasCores returns a boolean if a field has been set.
func (o *V0036NodeAllocation) HasCores() bool {
	if o != nil && o.Cores != nil {
		return true
	}

	return false
}

// SetCores gets a reference to the given map[string]interface{} and assigns it to the Cores field.
func (o *V0036NodeAllocation) SetCores(v map[string]interface{}) {
	o.Cores = &v
}

func (o V0036NodeAllocation) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Memory != nil {
		toSerialize["memory"] = o.Memory
	}
	if o.Cpus != nil {
		toSerialize["cpus"] = o.Cpus
	}
	if o.Sockets != nil {
		toSerialize["sockets"] = o.Sockets
	}
	if o.Cores != nil {
		toSerialize["cores"] = o.Cores
	}
	return json.Marshal(toSerialize)
}

type NullableV0036NodeAllocation struct {
	value *V0036NodeAllocation
	isSet bool
}

func (v NullableV0036NodeAllocation) Get() *V0036NodeAllocation {
	return v.value
}

func (v *NullableV0036NodeAllocation) Set(val *V0036NodeAllocation) {
	v.value = val
	v.isSet = true
}

func (v NullableV0036NodeAllocation) IsSet() bool {
	return v.isSet
}

func (v *NullableV0036NodeAllocation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV0036NodeAllocation(val *V0036NodeAllocation) *NullableV0036NodeAllocation {
	return &NullableV0036NodeAllocation{value: val, isSet: true}
}

func (v NullableV0036NodeAllocation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV0036NodeAllocation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


