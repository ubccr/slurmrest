/*
 * Slurm Rest API
 *
 * API to access and control Slurm.
 *
 * API version: 0.0.36
 * Contact: sales@schedmd.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package slurmrest

import (
	"encoding/json"
)

// V0036NodesResponse struct for V0036NodesResponse
type V0036NodesResponse struct {
	// slurm errors
	Errors *[]V0036Error `json:"errors,omitempty"`
	// nodes info
	Nodes *[]V0036Node `json:"nodes,omitempty"`
}

// NewV0036NodesResponse instantiates a new V0036NodesResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV0036NodesResponse() *V0036NodesResponse {
	this := V0036NodesResponse{}
	return &this
}

// NewV0036NodesResponseWithDefaults instantiates a new V0036NodesResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV0036NodesResponseWithDefaults() *V0036NodesResponse {
	this := V0036NodesResponse{}
	return &this
}

// GetErrors returns the Errors field value if set, zero value otherwise.
func (o *V0036NodesResponse) GetErrors() []V0036Error {
	if o == nil || o.Errors == nil {
		var ret []V0036Error
		return ret
	}
	return *o.Errors
}

// GetErrorsOk returns a tuple with the Errors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V0036NodesResponse) GetErrorsOk() (*[]V0036Error, bool) {
	if o == nil || o.Errors == nil {
		return nil, false
	}
	return o.Errors, true
}

// HasErrors returns a boolean if a field has been set.
func (o *V0036NodesResponse) HasErrors() bool {
	if o != nil && o.Errors != nil {
		return true
	}

	return false
}

// SetErrors gets a reference to the given []V0036Error and assigns it to the Errors field.
func (o *V0036NodesResponse) SetErrors(v []V0036Error) {
	o.Errors = &v
}

// GetNodes returns the Nodes field value if set, zero value otherwise.
func (o *V0036NodesResponse) GetNodes() []V0036Node {
	if o == nil || o.Nodes == nil {
		var ret []V0036Node
		return ret
	}
	return *o.Nodes
}

// GetNodesOk returns a tuple with the Nodes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V0036NodesResponse) GetNodesOk() (*[]V0036Node, bool) {
	if o == nil || o.Nodes == nil {
		return nil, false
	}
	return o.Nodes, true
}

// HasNodes returns a boolean if a field has been set.
func (o *V0036NodesResponse) HasNodes() bool {
	if o != nil && o.Nodes != nil {
		return true
	}

	return false
}

// SetNodes gets a reference to the given []V0036Node and assigns it to the Nodes field.
func (o *V0036NodesResponse) SetNodes(v []V0036Node) {
	o.Nodes = &v
}

func (o V0036NodesResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Errors != nil {
		toSerialize["errors"] = o.Errors
	}
	if o.Nodes != nil {
		toSerialize["nodes"] = o.Nodes
	}
	return json.Marshal(toSerialize)
}

type NullableV0036NodesResponse struct {
	value *V0036NodesResponse
	isSet bool
}

func (v NullableV0036NodesResponse) Get() *V0036NodesResponse {
	return v.value
}

func (v *NullableV0036NodesResponse) Set(val *V0036NodesResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableV0036NodesResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableV0036NodesResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV0036NodesResponse(val *V0036NodesResponse) *NullableV0036NodesResponse {
	return &NullableV0036NodesResponse{value: val, isSet: true}
}

func (v NullableV0036NodesResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV0036NodesResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


