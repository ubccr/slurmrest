/*
 * Slurm Rest API
 *
 * API to access and control Slurm.
 *
 * API version: 0.0.36
 * Contact: sales@schedmd.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package slurmrest

import (
	"encoding/json"
)

// V0036Partition struct for V0036Partition
type V0036Partition struct {
	// partition options
	Flags *[]string `json:"flags,omitempty"`
	// preemption type
	PreemptionMode *[]string `json:"preemption_mode,omitempty"`
	// list names of allowed allocating nodes
	AllowedAllocationNodes *string `json:"allowed_allocation_nodes,omitempty"`
	// comma delimited list of accounts
	AllowedAccounts *string `json:"allowed_accounts,omitempty"`
	// comma delimited list of groups
	AllowedGroups *string `json:"allowed_groups,omitempty"`
	// comma delimited list of qos
	AllowedQos *string `json:"allowed_qos,omitempty"`
	// name of alternate partition
	Alternative *string `json:"alternative,omitempty"`
	// TRES billing weights
	BillingWeights *string `json:"billing_weights,omitempty"`
	// default MB memory per allocated CPU
	DefaultMemoryPerCpu *int64 `json:"default_memory_per_cpu,omitempty"`
	// default time limit (minutes)
	DefaultTimeLimit *int64 `json:"default_time_limit,omitempty"`
	// comma delimited list of denied accounts
	DeniedAccounts *string `json:"denied_accounts,omitempty"`
	// comma delimited list of denied qos
	DeniedQos *string `json:"denied_qos,omitempty"`
	// preemption grace time (seconds)
	PreemptionGraceTime *int64 `json:"preemption_grace_time,omitempty"`
	// maximum allocated CPUs per node
	MaximumCpusPerNode *int32 `json:"maximum_cpus_per_node,omitempty"`
	// maximum memory per allocated CPU (MiB)
	MaximumMemoryPerNode *int64 `json:"maximum_memory_per_node,omitempty"`
	// Max nodes per job
	MaximumNodesPerJob *int32 `json:"maximum_nodes_per_job,omitempty"`
	// Max time limit per job
	MaxTimeLimit *int64 `json:"max_time_limit,omitempty"`
	// Min number of nodes per job
	MinNodesPerJob *int32 `json:"min_nodes_per_job,omitempty"`
	// Partition name
	Name *string `json:"name,omitempty"`
	// list names of nodes in partition
	Nodes *string `json:"nodes,omitempty"`
	// job's time limit can be exceeded by this number of minutes before cancellation
	OverTimeLimit *int32 `json:"over_time_limit,omitempty"`
	// job priority weight factor
	PriorityJobFactor *int32 `json:"priority_job_factor,omitempty"`
	// tier for scheduling and preemption
	PriorityTier *int32 `json:"priority_tier,omitempty"`
	// partition QOS name
	Qos *string `json:"qos,omitempty"`
	// Nodes online (ready for jobs)
	NodesOnline *int32 `json:"nodes_online,omitempty"`
	// Total cpus in partition
	TotalCpus *int32 `json:"total_cpus,omitempty"`
	// Total number of nodes in partition
	TotalNodes *int32 `json:"total_nodes,omitempty"`
	// configured TRES in partition
	Tres *string `json:"tres,omitempty"`
}

// NewV0036Partition instantiates a new V0036Partition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV0036Partition() *V0036Partition {
	this := V0036Partition{}
	return &this
}

// NewV0036PartitionWithDefaults instantiates a new V0036Partition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV0036PartitionWithDefaults() *V0036Partition {
	this := V0036Partition{}
	return &this
}

// GetFlags returns the Flags field value if set, zero value otherwise.
func (o *V0036Partition) GetFlags() []string {
	if o == nil || o.Flags == nil {
		var ret []string
		return ret
	}
	return *o.Flags
}

// GetFlagsOk returns a tuple with the Flags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V0036Partition) GetFlagsOk() (*[]string, bool) {
	if o == nil || o.Flags == nil {
		return nil, false
	}
	return o.Flags, true
}

// HasFlags returns a boolean if a field has been set.
func (o *V0036Partition) HasFlags() bool {
	if o != nil && o.Flags != nil {
		return true
	}

	return false
}

// SetFlags gets a reference to the given []string and assigns it to the Flags field.
func (o *V0036Partition) SetFlags(v []string) {
	o.Flags = &v
}

// GetPreemptionMode returns the PreemptionMode field value if set, zero value otherwise.
func (o *V0036Partition) GetPreemptionMode() []string {
	if o == nil || o.PreemptionMode == nil {
		var ret []string
		return ret
	}
	return *o.PreemptionMode
}

// GetPreemptionModeOk returns a tuple with the PreemptionMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V0036Partition) GetPreemptionModeOk() (*[]string, bool) {
	if o == nil || o.PreemptionMode == nil {
		return nil, false
	}
	return o.PreemptionMode, true
}

// HasPreemptionMode returns a boolean if a field has been set.
func (o *V0036Partition) HasPreemptionMode() bool {
	if o != nil && o.PreemptionMode != nil {
		return true
	}

	return false
}

// SetPreemptionMode gets a reference to the given []string and assigns it to the PreemptionMode field.
func (o *V0036Partition) SetPreemptionMode(v []string) {
	o.PreemptionMode = &v
}

// GetAllowedAllocationNodes returns the AllowedAllocationNodes field value if set, zero value otherwise.
func (o *V0036Partition) GetAllowedAllocationNodes() string {
	if o == nil || o.AllowedAllocationNodes == nil {
		var ret string
		return ret
	}
	return *o.AllowedAllocationNodes
}

// GetAllowedAllocationNodesOk returns a tuple with the AllowedAllocationNodes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V0036Partition) GetAllowedAllocationNodesOk() (*string, bool) {
	if o == nil || o.AllowedAllocationNodes == nil {
		return nil, false
	}
	return o.AllowedAllocationNodes, true
}

// HasAllowedAllocationNodes returns a boolean if a field has been set.
func (o *V0036Partition) HasAllowedAllocationNodes() bool {
	if o != nil && o.AllowedAllocationNodes != nil {
		return true
	}

	return false
}

// SetAllowedAllocationNodes gets a reference to the given string and assigns it to the AllowedAllocationNodes field.
func (o *V0036Partition) SetAllowedAllocationNodes(v string) {
	o.AllowedAllocationNodes = &v
}

// GetAllowedAccounts returns the AllowedAccounts field value if set, zero value otherwise.
func (o *V0036Partition) GetAllowedAccounts() string {
	if o == nil || o.AllowedAccounts == nil {
		var ret string
		return ret
	}
	return *o.AllowedAccounts
}

// GetAllowedAccountsOk returns a tuple with the AllowedAccounts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V0036Partition) GetAllowedAccountsOk() (*string, bool) {
	if o == nil || o.AllowedAccounts == nil {
		return nil, false
	}
	return o.AllowedAccounts, true
}

// HasAllowedAccounts returns a boolean if a field has been set.
func (o *V0036Partition) HasAllowedAccounts() bool {
	if o != nil && o.AllowedAccounts != nil {
		return true
	}

	return false
}

// SetAllowedAccounts gets a reference to the given string and assigns it to the AllowedAccounts field.
func (o *V0036Partition) SetAllowedAccounts(v string) {
	o.AllowedAccounts = &v
}

// GetAllowedGroups returns the AllowedGroups field value if set, zero value otherwise.
func (o *V0036Partition) GetAllowedGroups() string {
	if o == nil || o.AllowedGroups == nil {
		var ret string
		return ret
	}
	return *o.AllowedGroups
}

// GetAllowedGroupsOk returns a tuple with the AllowedGroups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V0036Partition) GetAllowedGroupsOk() (*string, bool) {
	if o == nil || o.AllowedGroups == nil {
		return nil, false
	}
	return o.AllowedGroups, true
}

// HasAllowedGroups returns a boolean if a field has been set.
func (o *V0036Partition) HasAllowedGroups() bool {
	if o != nil && o.AllowedGroups != nil {
		return true
	}

	return false
}

// SetAllowedGroups gets a reference to the given string and assigns it to the AllowedGroups field.
func (o *V0036Partition) SetAllowedGroups(v string) {
	o.AllowedGroups = &v
}

// GetAllowedQos returns the AllowedQos field value if set, zero value otherwise.
func (o *V0036Partition) GetAllowedQos() string {
	if o == nil || o.AllowedQos == nil {
		var ret string
		return ret
	}
	return *o.AllowedQos
}

// GetAllowedQosOk returns a tuple with the AllowedQos field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V0036Partition) GetAllowedQosOk() (*string, bool) {
	if o == nil || o.AllowedQos == nil {
		return nil, false
	}
	return o.AllowedQos, true
}

// HasAllowedQos returns a boolean if a field has been set.
func (o *V0036Partition) HasAllowedQos() bool {
	if o != nil && o.AllowedQos != nil {
		return true
	}

	return false
}

// SetAllowedQos gets a reference to the given string and assigns it to the AllowedQos field.
func (o *V0036Partition) SetAllowedQos(v string) {
	o.AllowedQos = &v
}

// GetAlternative returns the Alternative field value if set, zero value otherwise.
func (o *V0036Partition) GetAlternative() string {
	if o == nil || o.Alternative == nil {
		var ret string
		return ret
	}
	return *o.Alternative
}

// GetAlternativeOk returns a tuple with the Alternative field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V0036Partition) GetAlternativeOk() (*string, bool) {
	if o == nil || o.Alternative == nil {
		return nil, false
	}
	return o.Alternative, true
}

// HasAlternative returns a boolean if a field has been set.
func (o *V0036Partition) HasAlternative() bool {
	if o != nil && o.Alternative != nil {
		return true
	}

	return false
}

// SetAlternative gets a reference to the given string and assigns it to the Alternative field.
func (o *V0036Partition) SetAlternative(v string) {
	o.Alternative = &v
}

// GetBillingWeights returns the BillingWeights field value if set, zero value otherwise.
func (o *V0036Partition) GetBillingWeights() string {
	if o == nil || o.BillingWeights == nil {
		var ret string
		return ret
	}
	return *o.BillingWeights
}

// GetBillingWeightsOk returns a tuple with the BillingWeights field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V0036Partition) GetBillingWeightsOk() (*string, bool) {
	if o == nil || o.BillingWeights == nil {
		return nil, false
	}
	return o.BillingWeights, true
}

// HasBillingWeights returns a boolean if a field has been set.
func (o *V0036Partition) HasBillingWeights() bool {
	if o != nil && o.BillingWeights != nil {
		return true
	}

	return false
}

// SetBillingWeights gets a reference to the given string and assigns it to the BillingWeights field.
func (o *V0036Partition) SetBillingWeights(v string) {
	o.BillingWeights = &v
}

// GetDefaultMemoryPerCpu returns the DefaultMemoryPerCpu field value if set, zero value otherwise.
func (o *V0036Partition) GetDefaultMemoryPerCpu() int64 {
	if o == nil || o.DefaultMemoryPerCpu == nil {
		var ret int64
		return ret
	}
	return *o.DefaultMemoryPerCpu
}

// GetDefaultMemoryPerCpuOk returns a tuple with the DefaultMemoryPerCpu field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V0036Partition) GetDefaultMemoryPerCpuOk() (*int64, bool) {
	if o == nil || o.DefaultMemoryPerCpu == nil {
		return nil, false
	}
	return o.DefaultMemoryPerCpu, true
}

// HasDefaultMemoryPerCpu returns a boolean if a field has been set.
func (o *V0036Partition) HasDefaultMemoryPerCpu() bool {
	if o != nil && o.DefaultMemoryPerCpu != nil {
		return true
	}

	return false
}

// SetDefaultMemoryPerCpu gets a reference to the given int64 and assigns it to the DefaultMemoryPerCpu field.
func (o *V0036Partition) SetDefaultMemoryPerCpu(v int64) {
	o.DefaultMemoryPerCpu = &v
}

// GetDefaultTimeLimit returns the DefaultTimeLimit field value if set, zero value otherwise.
func (o *V0036Partition) GetDefaultTimeLimit() int64 {
	if o == nil || o.DefaultTimeLimit == nil {
		var ret int64
		return ret
	}
	return *o.DefaultTimeLimit
}

// GetDefaultTimeLimitOk returns a tuple with the DefaultTimeLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V0036Partition) GetDefaultTimeLimitOk() (*int64, bool) {
	if o == nil || o.DefaultTimeLimit == nil {
		return nil, false
	}
	return o.DefaultTimeLimit, true
}

// HasDefaultTimeLimit returns a boolean if a field has been set.
func (o *V0036Partition) HasDefaultTimeLimit() bool {
	if o != nil && o.DefaultTimeLimit != nil {
		return true
	}

	return false
}

// SetDefaultTimeLimit gets a reference to the given int64 and assigns it to the DefaultTimeLimit field.
func (o *V0036Partition) SetDefaultTimeLimit(v int64) {
	o.DefaultTimeLimit = &v
}

// GetDeniedAccounts returns the DeniedAccounts field value if set, zero value otherwise.
func (o *V0036Partition) GetDeniedAccounts() string {
	if o == nil || o.DeniedAccounts == nil {
		var ret string
		return ret
	}
	return *o.DeniedAccounts
}

// GetDeniedAccountsOk returns a tuple with the DeniedAccounts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V0036Partition) GetDeniedAccountsOk() (*string, bool) {
	if o == nil || o.DeniedAccounts == nil {
		return nil, false
	}
	return o.DeniedAccounts, true
}

// HasDeniedAccounts returns a boolean if a field has been set.
func (o *V0036Partition) HasDeniedAccounts() bool {
	if o != nil && o.DeniedAccounts != nil {
		return true
	}

	return false
}

// SetDeniedAccounts gets a reference to the given string and assigns it to the DeniedAccounts field.
func (o *V0036Partition) SetDeniedAccounts(v string) {
	o.DeniedAccounts = &v
}

// GetDeniedQos returns the DeniedQos field value if set, zero value otherwise.
func (o *V0036Partition) GetDeniedQos() string {
	if o == nil || o.DeniedQos == nil {
		var ret string
		return ret
	}
	return *o.DeniedQos
}

// GetDeniedQosOk returns a tuple with the DeniedQos field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V0036Partition) GetDeniedQosOk() (*string, bool) {
	if o == nil || o.DeniedQos == nil {
		return nil, false
	}
	return o.DeniedQos, true
}

// HasDeniedQos returns a boolean if a field has been set.
func (o *V0036Partition) HasDeniedQos() bool {
	if o != nil && o.DeniedQos != nil {
		return true
	}

	return false
}

// SetDeniedQos gets a reference to the given string and assigns it to the DeniedQos field.
func (o *V0036Partition) SetDeniedQos(v string) {
	o.DeniedQos = &v
}

// GetPreemptionGraceTime returns the PreemptionGraceTime field value if set, zero value otherwise.
func (o *V0036Partition) GetPreemptionGraceTime() int64 {
	if o == nil || o.PreemptionGraceTime == nil {
		var ret int64
		return ret
	}
	return *o.PreemptionGraceTime
}

// GetPreemptionGraceTimeOk returns a tuple with the PreemptionGraceTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V0036Partition) GetPreemptionGraceTimeOk() (*int64, bool) {
	if o == nil || o.PreemptionGraceTime == nil {
		return nil, false
	}
	return o.PreemptionGraceTime, true
}

// HasPreemptionGraceTime returns a boolean if a field has been set.
func (o *V0036Partition) HasPreemptionGraceTime() bool {
	if o != nil && o.PreemptionGraceTime != nil {
		return true
	}

	return false
}

// SetPreemptionGraceTime gets a reference to the given int64 and assigns it to the PreemptionGraceTime field.
func (o *V0036Partition) SetPreemptionGraceTime(v int64) {
	o.PreemptionGraceTime = &v
}

// GetMaximumCpusPerNode returns the MaximumCpusPerNode field value if set, zero value otherwise.
func (o *V0036Partition) GetMaximumCpusPerNode() int32 {
	if o == nil || o.MaximumCpusPerNode == nil {
		var ret int32
		return ret
	}
	return *o.MaximumCpusPerNode
}

// GetMaximumCpusPerNodeOk returns a tuple with the MaximumCpusPerNode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V0036Partition) GetMaximumCpusPerNodeOk() (*int32, bool) {
	if o == nil || o.MaximumCpusPerNode == nil {
		return nil, false
	}
	return o.MaximumCpusPerNode, true
}

// HasMaximumCpusPerNode returns a boolean if a field has been set.
func (o *V0036Partition) HasMaximumCpusPerNode() bool {
	if o != nil && o.MaximumCpusPerNode != nil {
		return true
	}

	return false
}

// SetMaximumCpusPerNode gets a reference to the given int32 and assigns it to the MaximumCpusPerNode field.
func (o *V0036Partition) SetMaximumCpusPerNode(v int32) {
	o.MaximumCpusPerNode = &v
}

// GetMaximumMemoryPerNode returns the MaximumMemoryPerNode field value if set, zero value otherwise.
func (o *V0036Partition) GetMaximumMemoryPerNode() int64 {
	if o == nil || o.MaximumMemoryPerNode == nil {
		var ret int64
		return ret
	}
	return *o.MaximumMemoryPerNode
}

// GetMaximumMemoryPerNodeOk returns a tuple with the MaximumMemoryPerNode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V0036Partition) GetMaximumMemoryPerNodeOk() (*int64, bool) {
	if o == nil || o.MaximumMemoryPerNode == nil {
		return nil, false
	}
	return o.MaximumMemoryPerNode, true
}

// HasMaximumMemoryPerNode returns a boolean if a field has been set.
func (o *V0036Partition) HasMaximumMemoryPerNode() bool {
	if o != nil && o.MaximumMemoryPerNode != nil {
		return true
	}

	return false
}

// SetMaximumMemoryPerNode gets a reference to the given int64 and assigns it to the MaximumMemoryPerNode field.
func (o *V0036Partition) SetMaximumMemoryPerNode(v int64) {
	o.MaximumMemoryPerNode = &v
}

// GetMaximumNodesPerJob returns the MaximumNodesPerJob field value if set, zero value otherwise.
func (o *V0036Partition) GetMaximumNodesPerJob() int32 {
	if o == nil || o.MaximumNodesPerJob == nil {
		var ret int32
		return ret
	}
	return *o.MaximumNodesPerJob
}

// GetMaximumNodesPerJobOk returns a tuple with the MaximumNodesPerJob field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V0036Partition) GetMaximumNodesPerJobOk() (*int32, bool) {
	if o == nil || o.MaximumNodesPerJob == nil {
		return nil, false
	}
	return o.MaximumNodesPerJob, true
}

// HasMaximumNodesPerJob returns a boolean if a field has been set.
func (o *V0036Partition) HasMaximumNodesPerJob() bool {
	if o != nil && o.MaximumNodesPerJob != nil {
		return true
	}

	return false
}

// SetMaximumNodesPerJob gets a reference to the given int32 and assigns it to the MaximumNodesPerJob field.
func (o *V0036Partition) SetMaximumNodesPerJob(v int32) {
	o.MaximumNodesPerJob = &v
}

// GetMaxTimeLimit returns the MaxTimeLimit field value if set, zero value otherwise.
func (o *V0036Partition) GetMaxTimeLimit() int64 {
	if o == nil || o.MaxTimeLimit == nil {
		var ret int64
		return ret
	}
	return *o.MaxTimeLimit
}

// GetMaxTimeLimitOk returns a tuple with the MaxTimeLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V0036Partition) GetMaxTimeLimitOk() (*int64, bool) {
	if o == nil || o.MaxTimeLimit == nil {
		return nil, false
	}
	return o.MaxTimeLimit, true
}

// HasMaxTimeLimit returns a boolean if a field has been set.
func (o *V0036Partition) HasMaxTimeLimit() bool {
	if o != nil && o.MaxTimeLimit != nil {
		return true
	}

	return false
}

// SetMaxTimeLimit gets a reference to the given int64 and assigns it to the MaxTimeLimit field.
func (o *V0036Partition) SetMaxTimeLimit(v int64) {
	o.MaxTimeLimit = &v
}

// GetMinNodesPerJob returns the MinNodesPerJob field value if set, zero value otherwise.
func (o *V0036Partition) GetMinNodesPerJob() int32 {
	if o == nil || o.MinNodesPerJob == nil {
		var ret int32
		return ret
	}
	return *o.MinNodesPerJob
}

// GetMinNodesPerJobOk returns a tuple with the MinNodesPerJob field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V0036Partition) GetMinNodesPerJobOk() (*int32, bool) {
	if o == nil || o.MinNodesPerJob == nil {
		return nil, false
	}
	return o.MinNodesPerJob, true
}

// HasMinNodesPerJob returns a boolean if a field has been set.
func (o *V0036Partition) HasMinNodesPerJob() bool {
	if o != nil && o.MinNodesPerJob != nil {
		return true
	}

	return false
}

// SetMinNodesPerJob gets a reference to the given int32 and assigns it to the MinNodesPerJob field.
func (o *V0036Partition) SetMinNodesPerJob(v int32) {
	o.MinNodesPerJob = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *V0036Partition) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V0036Partition) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *V0036Partition) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *V0036Partition) SetName(v string) {
	o.Name = &v
}

// GetNodes returns the Nodes field value if set, zero value otherwise.
func (o *V0036Partition) GetNodes() string {
	if o == nil || o.Nodes == nil {
		var ret string
		return ret
	}
	return *o.Nodes
}

// GetNodesOk returns a tuple with the Nodes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V0036Partition) GetNodesOk() (*string, bool) {
	if o == nil || o.Nodes == nil {
		return nil, false
	}
	return o.Nodes, true
}

// HasNodes returns a boolean if a field has been set.
func (o *V0036Partition) HasNodes() bool {
	if o != nil && o.Nodes != nil {
		return true
	}

	return false
}

// SetNodes gets a reference to the given string and assigns it to the Nodes field.
func (o *V0036Partition) SetNodes(v string) {
	o.Nodes = &v
}

// GetOverTimeLimit returns the OverTimeLimit field value if set, zero value otherwise.
func (o *V0036Partition) GetOverTimeLimit() int32 {
	if o == nil || o.OverTimeLimit == nil {
		var ret int32
		return ret
	}
	return *o.OverTimeLimit
}

// GetOverTimeLimitOk returns a tuple with the OverTimeLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V0036Partition) GetOverTimeLimitOk() (*int32, bool) {
	if o == nil || o.OverTimeLimit == nil {
		return nil, false
	}
	return o.OverTimeLimit, true
}

// HasOverTimeLimit returns a boolean if a field has been set.
func (o *V0036Partition) HasOverTimeLimit() bool {
	if o != nil && o.OverTimeLimit != nil {
		return true
	}

	return false
}

// SetOverTimeLimit gets a reference to the given int32 and assigns it to the OverTimeLimit field.
func (o *V0036Partition) SetOverTimeLimit(v int32) {
	o.OverTimeLimit = &v
}

// GetPriorityJobFactor returns the PriorityJobFactor field value if set, zero value otherwise.
func (o *V0036Partition) GetPriorityJobFactor() int32 {
	if o == nil || o.PriorityJobFactor == nil {
		var ret int32
		return ret
	}
	return *o.PriorityJobFactor
}

// GetPriorityJobFactorOk returns a tuple with the PriorityJobFactor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V0036Partition) GetPriorityJobFactorOk() (*int32, bool) {
	if o == nil || o.PriorityJobFactor == nil {
		return nil, false
	}
	return o.PriorityJobFactor, true
}

// HasPriorityJobFactor returns a boolean if a field has been set.
func (o *V0036Partition) HasPriorityJobFactor() bool {
	if o != nil && o.PriorityJobFactor != nil {
		return true
	}

	return false
}

// SetPriorityJobFactor gets a reference to the given int32 and assigns it to the PriorityJobFactor field.
func (o *V0036Partition) SetPriorityJobFactor(v int32) {
	o.PriorityJobFactor = &v
}

// GetPriorityTier returns the PriorityTier field value if set, zero value otherwise.
func (o *V0036Partition) GetPriorityTier() int32 {
	if o == nil || o.PriorityTier == nil {
		var ret int32
		return ret
	}
	return *o.PriorityTier
}

// GetPriorityTierOk returns a tuple with the PriorityTier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V0036Partition) GetPriorityTierOk() (*int32, bool) {
	if o == nil || o.PriorityTier == nil {
		return nil, false
	}
	return o.PriorityTier, true
}

// HasPriorityTier returns a boolean if a field has been set.
func (o *V0036Partition) HasPriorityTier() bool {
	if o != nil && o.PriorityTier != nil {
		return true
	}

	return false
}

// SetPriorityTier gets a reference to the given int32 and assigns it to the PriorityTier field.
func (o *V0036Partition) SetPriorityTier(v int32) {
	o.PriorityTier = &v
}

// GetQos returns the Qos field value if set, zero value otherwise.
func (o *V0036Partition) GetQos() string {
	if o == nil || o.Qos == nil {
		var ret string
		return ret
	}
	return *o.Qos
}

// GetQosOk returns a tuple with the Qos field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V0036Partition) GetQosOk() (*string, bool) {
	if o == nil || o.Qos == nil {
		return nil, false
	}
	return o.Qos, true
}

// HasQos returns a boolean if a field has been set.
func (o *V0036Partition) HasQos() bool {
	if o != nil && o.Qos != nil {
		return true
	}

	return false
}

// SetQos gets a reference to the given string and assigns it to the Qos field.
func (o *V0036Partition) SetQos(v string) {
	o.Qos = &v
}

// GetNodesOnline returns the NodesOnline field value if set, zero value otherwise.
func (o *V0036Partition) GetNodesOnline() int32 {
	if o == nil || o.NodesOnline == nil {
		var ret int32
		return ret
	}
	return *o.NodesOnline
}

// GetNodesOnlineOk returns a tuple with the NodesOnline field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V0036Partition) GetNodesOnlineOk() (*int32, bool) {
	if o == nil || o.NodesOnline == nil {
		return nil, false
	}
	return o.NodesOnline, true
}

// HasNodesOnline returns a boolean if a field has been set.
func (o *V0036Partition) HasNodesOnline() bool {
	if o != nil && o.NodesOnline != nil {
		return true
	}

	return false
}

// SetNodesOnline gets a reference to the given int32 and assigns it to the NodesOnline field.
func (o *V0036Partition) SetNodesOnline(v int32) {
	o.NodesOnline = &v
}

// GetTotalCpus returns the TotalCpus field value if set, zero value otherwise.
func (o *V0036Partition) GetTotalCpus() int32 {
	if o == nil || o.TotalCpus == nil {
		var ret int32
		return ret
	}
	return *o.TotalCpus
}

// GetTotalCpusOk returns a tuple with the TotalCpus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V0036Partition) GetTotalCpusOk() (*int32, bool) {
	if o == nil || o.TotalCpus == nil {
		return nil, false
	}
	return o.TotalCpus, true
}

// HasTotalCpus returns a boolean if a field has been set.
func (o *V0036Partition) HasTotalCpus() bool {
	if o != nil && o.TotalCpus != nil {
		return true
	}

	return false
}

// SetTotalCpus gets a reference to the given int32 and assigns it to the TotalCpus field.
func (o *V0036Partition) SetTotalCpus(v int32) {
	o.TotalCpus = &v
}

// GetTotalNodes returns the TotalNodes field value if set, zero value otherwise.
func (o *V0036Partition) GetTotalNodes() int32 {
	if o == nil || o.TotalNodes == nil {
		var ret int32
		return ret
	}
	return *o.TotalNodes
}

// GetTotalNodesOk returns a tuple with the TotalNodes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V0036Partition) GetTotalNodesOk() (*int32, bool) {
	if o == nil || o.TotalNodes == nil {
		return nil, false
	}
	return o.TotalNodes, true
}

// HasTotalNodes returns a boolean if a field has been set.
func (o *V0036Partition) HasTotalNodes() bool {
	if o != nil && o.TotalNodes != nil {
		return true
	}

	return false
}

// SetTotalNodes gets a reference to the given int32 and assigns it to the TotalNodes field.
func (o *V0036Partition) SetTotalNodes(v int32) {
	o.TotalNodes = &v
}

// GetTres returns the Tres field value if set, zero value otherwise.
func (o *V0036Partition) GetTres() string {
	if o == nil || o.Tres == nil {
		var ret string
		return ret
	}
	return *o.Tres
}

// GetTresOk returns a tuple with the Tres field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V0036Partition) GetTresOk() (*string, bool) {
	if o == nil || o.Tres == nil {
		return nil, false
	}
	return o.Tres, true
}

// HasTres returns a boolean if a field has been set.
func (o *V0036Partition) HasTres() bool {
	if o != nil && o.Tres != nil {
		return true
	}

	return false
}

// SetTres gets a reference to the given string and assigns it to the Tres field.
func (o *V0036Partition) SetTres(v string) {
	o.Tres = &v
}

func (o V0036Partition) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Flags != nil {
		toSerialize["flags"] = o.Flags
	}
	if o.PreemptionMode != nil {
		toSerialize["preemption_mode"] = o.PreemptionMode
	}
	if o.AllowedAllocationNodes != nil {
		toSerialize["allowed_allocation_nodes"] = o.AllowedAllocationNodes
	}
	if o.AllowedAccounts != nil {
		toSerialize["allowed_accounts"] = o.AllowedAccounts
	}
	if o.AllowedGroups != nil {
		toSerialize["allowed_groups"] = o.AllowedGroups
	}
	if o.AllowedQos != nil {
		toSerialize["allowed_qos"] = o.AllowedQos
	}
	if o.Alternative != nil {
		toSerialize["alternative"] = o.Alternative
	}
	if o.BillingWeights != nil {
		toSerialize["billing_weights"] = o.BillingWeights
	}
	if o.DefaultMemoryPerCpu != nil {
		toSerialize["default_memory_per_cpu"] = o.DefaultMemoryPerCpu
	}
	if o.DefaultTimeLimit != nil {
		toSerialize["default_time_limit"] = o.DefaultTimeLimit
	}
	if o.DeniedAccounts != nil {
		toSerialize["denied_accounts"] = o.DeniedAccounts
	}
	if o.DeniedQos != nil {
		toSerialize["denied_qos"] = o.DeniedQos
	}
	if o.PreemptionGraceTime != nil {
		toSerialize["preemption_grace_time"] = o.PreemptionGraceTime
	}
	if o.MaximumCpusPerNode != nil {
		toSerialize["maximum_cpus_per_node"] = o.MaximumCpusPerNode
	}
	if o.MaximumMemoryPerNode != nil {
		toSerialize["maximum_memory_per_node"] = o.MaximumMemoryPerNode
	}
	if o.MaximumNodesPerJob != nil {
		toSerialize["maximum_nodes_per_job"] = o.MaximumNodesPerJob
	}
	if o.MaxTimeLimit != nil {
		toSerialize["max_time_limit"] = o.MaxTimeLimit
	}
	if o.MinNodesPerJob != nil {
		toSerialize["min_nodes_per_job"] = o.MinNodesPerJob
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Nodes != nil {
		toSerialize["nodes"] = o.Nodes
	}
	if o.OverTimeLimit != nil {
		toSerialize["over_time_limit"] = o.OverTimeLimit
	}
	if o.PriorityJobFactor != nil {
		toSerialize["priority_job_factor"] = o.PriorityJobFactor
	}
	if o.PriorityTier != nil {
		toSerialize["priority_tier"] = o.PriorityTier
	}
	if o.Qos != nil {
		toSerialize["qos"] = o.Qos
	}
	if o.NodesOnline != nil {
		toSerialize["nodes_online"] = o.NodesOnline
	}
	if o.TotalCpus != nil {
		toSerialize["total_cpus"] = o.TotalCpus
	}
	if o.TotalNodes != nil {
		toSerialize["total_nodes"] = o.TotalNodes
	}
	if o.Tres != nil {
		toSerialize["tres"] = o.Tres
	}
	return json.Marshal(toSerialize)
}

type NullableV0036Partition struct {
	value *V0036Partition
	isSet bool
}

func (v NullableV0036Partition) Get() *V0036Partition {
	return v.value
}

func (v *NullableV0036Partition) Set(val *V0036Partition) {
	v.value = val
	v.isSet = true
}

func (v NullableV0036Partition) IsSet() bool {
	return v.isSet
}

func (v *NullableV0036Partition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV0036Partition(val *V0036Partition) *NullableV0036Partition {
	return &NullableV0036Partition{value: val, isSet: true}
}

func (v NullableV0036Partition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV0036Partition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


