/*
 * Slurm Rest API
 *
 * API to access and control Slurm.
 *
 * API version: 0.0.37
 * Contact: sales@schedmd.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package slurmrest

import (
	"encoding/json"
)

// V0037DiagRpcu struct for V0037DiagRpcu
type V0037DiagRpcu struct {
	// user
	User *string `json:"user,omitempty"`
	// user id
	UserId *int32 `json:"user_id,omitempty"`
	// rpc count
	Count *int32 `json:"count,omitempty"`
	// average time
	AveTime *int32 `json:"ave_time,omitempty"`
	// total time
	TotalTime *int32 `json:"total_time,omitempty"`
}

// NewV0037DiagRpcu instantiates a new V0037DiagRpcu object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV0037DiagRpcu() *V0037DiagRpcu {
	this := V0037DiagRpcu{}
	return &this
}

// NewV0037DiagRpcuWithDefaults instantiates a new V0037DiagRpcu object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV0037DiagRpcuWithDefaults() *V0037DiagRpcu {
	this := V0037DiagRpcu{}
	return &this
}

// GetUser returns the User field value if set, zero value otherwise.
func (o *V0037DiagRpcu) GetUser() string {
	if o == nil || o.User == nil {
		var ret string
		return ret
	}
	return *o.User
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V0037DiagRpcu) GetUserOk() (*string, bool) {
	if o == nil || o.User == nil {
		return nil, false
	}
	return o.User, true
}

// HasUser returns a boolean if a field has been set.
func (o *V0037DiagRpcu) HasUser() bool {
	if o != nil && o.User != nil {
		return true
	}

	return false
}

// SetUser gets a reference to the given string and assigns it to the User field.
func (o *V0037DiagRpcu) SetUser(v string) {
	o.User = &v
}

// GetUserId returns the UserId field value if set, zero value otherwise.
func (o *V0037DiagRpcu) GetUserId() int32 {
	if o == nil || o.UserId == nil {
		var ret int32
		return ret
	}
	return *o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V0037DiagRpcu) GetUserIdOk() (*int32, bool) {
	if o == nil || o.UserId == nil {
		return nil, false
	}
	return o.UserId, true
}

// HasUserId returns a boolean if a field has been set.
func (o *V0037DiagRpcu) HasUserId() bool {
	if o != nil && o.UserId != nil {
		return true
	}

	return false
}

// SetUserId gets a reference to the given int32 and assigns it to the UserId field.
func (o *V0037DiagRpcu) SetUserId(v int32) {
	o.UserId = &v
}

// GetCount returns the Count field value if set, zero value otherwise.
func (o *V0037DiagRpcu) GetCount() int32 {
	if o == nil || o.Count == nil {
		var ret int32
		return ret
	}
	return *o.Count
}

// GetCountOk returns a tuple with the Count field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V0037DiagRpcu) GetCountOk() (*int32, bool) {
	if o == nil || o.Count == nil {
		return nil, false
	}
	return o.Count, true
}

// HasCount returns a boolean if a field has been set.
func (o *V0037DiagRpcu) HasCount() bool {
	if o != nil && o.Count != nil {
		return true
	}

	return false
}

// SetCount gets a reference to the given int32 and assigns it to the Count field.
func (o *V0037DiagRpcu) SetCount(v int32) {
	o.Count = &v
}

// GetAveTime returns the AveTime field value if set, zero value otherwise.
func (o *V0037DiagRpcu) GetAveTime() int32 {
	if o == nil || o.AveTime == nil {
		var ret int32
		return ret
	}
	return *o.AveTime
}

// GetAveTimeOk returns a tuple with the AveTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V0037DiagRpcu) GetAveTimeOk() (*int32, bool) {
	if o == nil || o.AveTime == nil {
		return nil, false
	}
	return o.AveTime, true
}

// HasAveTime returns a boolean if a field has been set.
func (o *V0037DiagRpcu) HasAveTime() bool {
	if o != nil && o.AveTime != nil {
		return true
	}

	return false
}

// SetAveTime gets a reference to the given int32 and assigns it to the AveTime field.
func (o *V0037DiagRpcu) SetAveTime(v int32) {
	o.AveTime = &v
}

// GetTotalTime returns the TotalTime field value if set, zero value otherwise.
func (o *V0037DiagRpcu) GetTotalTime() int32 {
	if o == nil || o.TotalTime == nil {
		var ret int32
		return ret
	}
	return *o.TotalTime
}

// GetTotalTimeOk returns a tuple with the TotalTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V0037DiagRpcu) GetTotalTimeOk() (*int32, bool) {
	if o == nil || o.TotalTime == nil {
		return nil, false
	}
	return o.TotalTime, true
}

// HasTotalTime returns a boolean if a field has been set.
func (o *V0037DiagRpcu) HasTotalTime() bool {
	if o != nil && o.TotalTime != nil {
		return true
	}

	return false
}

// SetTotalTime gets a reference to the given int32 and assigns it to the TotalTime field.
func (o *V0037DiagRpcu) SetTotalTime(v int32) {
	o.TotalTime = &v
}

func (o V0037DiagRpcu) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.User != nil {
		toSerialize["user"] = o.User
	}
	if o.UserId != nil {
		toSerialize["user_id"] = o.UserId
	}
	if o.Count != nil {
		toSerialize["count"] = o.Count
	}
	if o.AveTime != nil {
		toSerialize["ave_time"] = o.AveTime
	}
	if o.TotalTime != nil {
		toSerialize["total_time"] = o.TotalTime
	}
	return json.Marshal(toSerialize)
}

type NullableV0037DiagRpcu struct {
	value *V0037DiagRpcu
	isSet bool
}

func (v NullableV0037DiagRpcu) Get() *V0037DiagRpcu {
	return v.value
}

func (v *NullableV0037DiagRpcu) Set(val *V0037DiagRpcu) {
	v.value = val
	v.isSet = true
}

func (v NullableV0037DiagRpcu) IsSet() bool {
	return v.isSet
}

func (v *NullableV0037DiagRpcu) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV0037DiagRpcu(val *V0037DiagRpcu) *NullableV0037DiagRpcu {
	return &NullableV0037DiagRpcu{value: val, isSet: true}
}

func (v NullableV0037DiagRpcu) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV0037DiagRpcu) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


