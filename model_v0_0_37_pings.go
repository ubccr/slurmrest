/*
 * Slurm Rest API
 *
 * API to access and control Slurm.
 *
 * API version: 0.0.37
 * Contact: sales@schedmd.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package slurmrest

import (
	"encoding/json"
)

// V0037Pings struct for V0037Pings
type V0037Pings struct {
	// slurm errors
	Errors *[]V0037Error `json:"errors,omitempty"`
	// slurm controller pings
	Pings *[]V0037Ping `json:"pings,omitempty"`
}

// NewV0037Pings instantiates a new V0037Pings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV0037Pings() *V0037Pings {
	this := V0037Pings{}
	return &this
}

// NewV0037PingsWithDefaults instantiates a new V0037Pings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV0037PingsWithDefaults() *V0037Pings {
	this := V0037Pings{}
	return &this
}

// GetErrors returns the Errors field value if set, zero value otherwise.
func (o *V0037Pings) GetErrors() []V0037Error {
	if o == nil || o.Errors == nil {
		var ret []V0037Error
		return ret
	}
	return *o.Errors
}

// GetErrorsOk returns a tuple with the Errors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V0037Pings) GetErrorsOk() (*[]V0037Error, bool) {
	if o == nil || o.Errors == nil {
		return nil, false
	}
	return o.Errors, true
}

// HasErrors returns a boolean if a field has been set.
func (o *V0037Pings) HasErrors() bool {
	if o != nil && o.Errors != nil {
		return true
	}

	return false
}

// SetErrors gets a reference to the given []V0037Error and assigns it to the Errors field.
func (o *V0037Pings) SetErrors(v []V0037Error) {
	o.Errors = &v
}

// GetPings returns the Pings field value if set, zero value otherwise.
func (o *V0037Pings) GetPings() []V0037Ping {
	if o == nil || o.Pings == nil {
		var ret []V0037Ping
		return ret
	}
	return *o.Pings
}

// GetPingsOk returns a tuple with the Pings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V0037Pings) GetPingsOk() (*[]V0037Ping, bool) {
	if o == nil || o.Pings == nil {
		return nil, false
	}
	return o.Pings, true
}

// HasPings returns a boolean if a field has been set.
func (o *V0037Pings) HasPings() bool {
	if o != nil && o.Pings != nil {
		return true
	}

	return false
}

// SetPings gets a reference to the given []V0037Ping and assigns it to the Pings field.
func (o *V0037Pings) SetPings(v []V0037Ping) {
	o.Pings = &v
}

func (o V0037Pings) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Errors != nil {
		toSerialize["errors"] = o.Errors
	}
	if o.Pings != nil {
		toSerialize["pings"] = o.Pings
	}
	return json.Marshal(toSerialize)
}

type NullableV0037Pings struct {
	value *V0037Pings
	isSet bool
}

func (v NullableV0037Pings) Get() *V0037Pings {
	return v.value
}

func (v *NullableV0037Pings) Set(val *V0037Pings) {
	v.value = val
	v.isSet = true
}

func (v NullableV0037Pings) IsSet() bool {
	return v.isSet
}

func (v *NullableV0037Pings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV0037Pings(val *V0037Pings) *NullableV0037Pings {
	return &NullableV0037Pings{value: val, isSet: true}
}

func (v NullableV0037Pings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV0037Pings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


