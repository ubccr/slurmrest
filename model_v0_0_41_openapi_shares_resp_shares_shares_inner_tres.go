/*
Slurm REST API

API to access and control Slurm

API version: Slurm-24.05.2&openapi/dbv0.0.39&openapi/v0.0.39&openapi/slurmdbd&openapi/slurmctld
Contact: sales@schedmd.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package slurmrest

import (
	"encoding/json"
)

// checks if the V0041OpenapiSharesRespSharesSharesInnerTres type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V0041OpenapiSharesRespSharesSharesInnerTres{}

// V0041OpenapiSharesRespSharesSharesInnerTres struct for V0041OpenapiSharesRespSharesSharesInnerTres
type V0041OpenapiSharesRespSharesSharesInnerTres struct {
	// currently running tres-secs = grp_used_tres_run_secs
	RunSeconds []V0041OpenapiSharesRespSharesSharesInnerTresRunSecondsInner `json:"run_seconds,omitempty"`
	// tres-minute limit
	GroupMinutes []V0041OpenapiSharesRespSharesSharesInnerTresRunSecondsInner `json:"group_minutes,omitempty"`
	// measure of each tres usage
	Usage []V0041OpenapiSharesRespSharesSharesInnerTresUsageInner `json:"usage,omitempty"`
}

// NewV0041OpenapiSharesRespSharesSharesInnerTres instantiates a new V0041OpenapiSharesRespSharesSharesInnerTres object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV0041OpenapiSharesRespSharesSharesInnerTres() *V0041OpenapiSharesRespSharesSharesInnerTres {
	this := V0041OpenapiSharesRespSharesSharesInnerTres{}
	return &this
}

// NewV0041OpenapiSharesRespSharesSharesInnerTresWithDefaults instantiates a new V0041OpenapiSharesRespSharesSharesInnerTres object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV0041OpenapiSharesRespSharesSharesInnerTresWithDefaults() *V0041OpenapiSharesRespSharesSharesInnerTres {
	this := V0041OpenapiSharesRespSharesSharesInnerTres{}
	return &this
}

// GetRunSeconds returns the RunSeconds field value if set, zero value otherwise.
func (o *V0041OpenapiSharesRespSharesSharesInnerTres) GetRunSeconds() []V0041OpenapiSharesRespSharesSharesInnerTresRunSecondsInner {
	if o == nil || IsNil(o.RunSeconds) {
		var ret []V0041OpenapiSharesRespSharesSharesInnerTresRunSecondsInner
		return ret
	}
	return o.RunSeconds
}

// GetRunSecondsOk returns a tuple with the RunSeconds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V0041OpenapiSharesRespSharesSharesInnerTres) GetRunSecondsOk() ([]V0041OpenapiSharesRespSharesSharesInnerTresRunSecondsInner, bool) {
	if o == nil || IsNil(o.RunSeconds) {
		return nil, false
	}
	return o.RunSeconds, true
}

// HasRunSeconds returns a boolean if a field has been set.
func (o *V0041OpenapiSharesRespSharesSharesInnerTres) HasRunSeconds() bool {
	if o != nil && !IsNil(o.RunSeconds) {
		return true
	}

	return false
}

// SetRunSeconds gets a reference to the given []V0041OpenapiSharesRespSharesSharesInnerTresRunSecondsInner and assigns it to the RunSeconds field.
func (o *V0041OpenapiSharesRespSharesSharesInnerTres) SetRunSeconds(v []V0041OpenapiSharesRespSharesSharesInnerTresRunSecondsInner) {
	o.RunSeconds = v
}

// GetGroupMinutes returns the GroupMinutes field value if set, zero value otherwise.
func (o *V0041OpenapiSharesRespSharesSharesInnerTres) GetGroupMinutes() []V0041OpenapiSharesRespSharesSharesInnerTresRunSecondsInner {
	if o == nil || IsNil(o.GroupMinutes) {
		var ret []V0041OpenapiSharesRespSharesSharesInnerTresRunSecondsInner
		return ret
	}
	return o.GroupMinutes
}

// GetGroupMinutesOk returns a tuple with the GroupMinutes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V0041OpenapiSharesRespSharesSharesInnerTres) GetGroupMinutesOk() ([]V0041OpenapiSharesRespSharesSharesInnerTresRunSecondsInner, bool) {
	if o == nil || IsNil(o.GroupMinutes) {
		return nil, false
	}
	return o.GroupMinutes, true
}

// HasGroupMinutes returns a boolean if a field has been set.
func (o *V0041OpenapiSharesRespSharesSharesInnerTres) HasGroupMinutes() bool {
	if o != nil && !IsNil(o.GroupMinutes) {
		return true
	}

	return false
}

// SetGroupMinutes gets a reference to the given []V0041OpenapiSharesRespSharesSharesInnerTresRunSecondsInner and assigns it to the GroupMinutes field.
func (o *V0041OpenapiSharesRespSharesSharesInnerTres) SetGroupMinutes(v []V0041OpenapiSharesRespSharesSharesInnerTresRunSecondsInner) {
	o.GroupMinutes = v
}

// GetUsage returns the Usage field value if set, zero value otherwise.
func (o *V0041OpenapiSharesRespSharesSharesInnerTres) GetUsage() []V0041OpenapiSharesRespSharesSharesInnerTresUsageInner {
	if o == nil || IsNil(o.Usage) {
		var ret []V0041OpenapiSharesRespSharesSharesInnerTresUsageInner
		return ret
	}
	return o.Usage
}

// GetUsageOk returns a tuple with the Usage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V0041OpenapiSharesRespSharesSharesInnerTres) GetUsageOk() ([]V0041OpenapiSharesRespSharesSharesInnerTresUsageInner, bool) {
	if o == nil || IsNil(o.Usage) {
		return nil, false
	}
	return o.Usage, true
}

// HasUsage returns a boolean if a field has been set.
func (o *V0041OpenapiSharesRespSharesSharesInnerTres) HasUsage() bool {
	if o != nil && !IsNil(o.Usage) {
		return true
	}

	return false
}

// SetUsage gets a reference to the given []V0041OpenapiSharesRespSharesSharesInnerTresUsageInner and assigns it to the Usage field.
func (o *V0041OpenapiSharesRespSharesSharesInnerTres) SetUsage(v []V0041OpenapiSharesRespSharesSharesInnerTresUsageInner) {
	o.Usage = v
}

func (o V0041OpenapiSharesRespSharesSharesInnerTres) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V0041OpenapiSharesRespSharesSharesInnerTres) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.RunSeconds) {
		toSerialize["run_seconds"] = o.RunSeconds
	}
	if !IsNil(o.GroupMinutes) {
		toSerialize["group_minutes"] = o.GroupMinutes
	}
	if !IsNil(o.Usage) {
		toSerialize["usage"] = o.Usage
	}
	return toSerialize, nil
}

type NullableV0041OpenapiSharesRespSharesSharesInnerTres struct {
	value *V0041OpenapiSharesRespSharesSharesInnerTres
	isSet bool
}

func (v NullableV0041OpenapiSharesRespSharesSharesInnerTres) Get() *V0041OpenapiSharesRespSharesSharesInnerTres {
	return v.value
}

func (v *NullableV0041OpenapiSharesRespSharesSharesInnerTres) Set(val *V0041OpenapiSharesRespSharesSharesInnerTres) {
	v.value = val
	v.isSet = true
}

func (v NullableV0041OpenapiSharesRespSharesSharesInnerTres) IsSet() bool {
	return v.isSet
}

func (v *NullableV0041OpenapiSharesRespSharesSharesInnerTres) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV0041OpenapiSharesRespSharesSharesInnerTres(val *V0041OpenapiSharesRespSharesSharesInnerTres) *NullableV0041OpenapiSharesRespSharesSharesInnerTres {
	return &NullableV0041OpenapiSharesRespSharesSharesInnerTres{value: val, isSet: true}
}

func (v NullableV0041OpenapiSharesRespSharesSharesInnerTres) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV0041OpenapiSharesRespSharesSharesInnerTres) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


